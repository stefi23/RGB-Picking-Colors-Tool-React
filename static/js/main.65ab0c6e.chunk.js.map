{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","console","log","setState","target","name","value","newColor","state","red","green","blue","className","onChange","this","type","min","max","placeholder","align","style","padding","background","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAgIeA,G,kBA5Hb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,aAAe,SAAAC,GACbC,QAAQC,IAAI,WACZ,EAAKC,SAAL,eACGH,EAAMI,OAAOC,KAAOL,EAAMI,OAAOE,SAZnB,EAgBnBC,SAAW,WACT,MAAM,OAAN,OAAc,EAAKC,MAAMC,IAAzB,aAAiC,EAAKD,MAAME,MAA5C,aAAsD,EAAKF,MAAMG,KAAjE,MAfA,EAAKH,MAAQ,CACXC,IAAK,MACLC,MAAO,MACPC,KAAM,OALS,E,sEAqBjB,OACE,yBAAKC,UAAU,OACb,0BAAMA,UAAU,aACd,uDACA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,kBACb,2BAAOA,UAAU,eAAjB,eAGJ,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,UACb,2BACEC,SAAUC,KAAKf,aACfO,MAAOQ,KAAKN,MAAMC,IAClBG,UAAU,SACVP,KAAK,MACLU,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,YAAY,SAGhB,yBAAKN,UAAU,UACb,2BACEN,MAAOQ,KAAKN,MAAMC,IAClBU,MAAM,SACNJ,KAAK,SACLH,UAAU,mBAIhB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,kBACb,2BAAOA,UAAU,eAAjB,iBAGJ,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,UACb,2BACEC,SAAUC,KAAKf,aACfO,MAAOQ,KAAKN,MAAME,MAClBE,UAAU,SACVP,KAAK,QACLU,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,YAAY,SAGhB,yBAAKN,UAAU,UACb,2BACEN,MAAOQ,KAAKN,MAAME,MAClBS,MAAM,SACNJ,KAAK,SACLH,UAAU,mBAIhB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,kBACb,2BAAOA,UAAU,eAAjB,gBAGJ,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,UACb,2BACEC,SAAUC,KAAKf,aACfO,MAAOQ,KAAKN,MAAMG,KAClBC,UAAU,SACVP,KAAK,OACLU,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,YAAY,UAGhB,yBAAKN,UAAU,UACb,2BACEN,MAAOQ,KAAKN,MAAMG,KAClBQ,MAAM,SACNJ,KAAK,SACLH,UAAU,mBAIhB,yBAAKA,UAAU,0BACb,yBACEA,UAAU,2BACVQ,MAAO,CAELC,QAAS,MACTC,WAAW,GAAD,OAAKR,KAAKP,cAGrBO,KAAKP,mB,GApHFgB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.65ab0c6e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      red: \"127\",\n      green: \"127\",\n      blue: \"127\"\n    };\n  }\n\n  handleChange = event => {\n    console.log(\"touched\");\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  newColor = () => {\n    return `rgb(${this.state.red}, ${this.state.green}, ${this.state.blue})`;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form className=\"form mt-5\">\n          <h1>RGB Picking Colors Tool</h1>\n          <div className=\"form-group\">\n            <div className=\"col-6 offset-6\">\n              <label className=\"align-right\">Red Color</label>\n            </div>\n          </div>\n          <div className=\"row container-fluid\">\n            <div className=\"col-6 \">\n              <input\n                onChange={this.handleChange}\n                value={this.state.red}\n                className=\"picker\"\n                name=\"red\"\n                type=\"range\"\n                min=\"0\"\n                max=\"255\"\n                placeholder=\"Red\"\n              ></input>\n            </div>\n            <div className=\"col-6 \">\n              <input\n                value={this.state.red}\n                align=\"center\"\n                type=\"number\"\n                className=\"form-control\"\n              ></input>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-6 offset-6\">\n              <label className=\"align-right\">Green Color</label>\n            </div>\n          </div>\n          <div className=\"row container-fluid\">\n            <div className=\"col-6 \">\n              <input\n                onChange={this.handleChange}\n                value={this.state.green}\n                className=\"picker\"\n                name=\"green\"\n                type=\"range\"\n                min=\"0\"\n                max=\"255\"\n                placeholder=\"Red\"\n              ></input>\n            </div>\n            <div className=\"col-6 \">\n              <input\n                value={this.state.green}\n                align=\"center\"\n                type=\"number\"\n                className=\"form-control\"\n              ></input>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-6 offset-6\">\n              <label className=\"align-right\">Blue Color</label>\n            </div>\n          </div>\n          <div className=\"row container-fluid\">\n            <div className=\"col-6 \">\n              <input\n                onChange={this.handleChange}\n                value={this.state.blue}\n                className=\"picker\"\n                name=\"blue\"\n                type=\"range\"\n                min=\"0\"\n                max=\"255\"\n                placeholder=\"Blue\"\n              ></input>\n            </div>\n            <div className=\"col-6 \">\n              <input\n                value={this.state.blue}\n                align=\"center\"\n                type=\"number\"\n                className=\"form-control\"\n              ></input>\n            </div>\n          </div>\n          <div className=\"row align-items-center\">\n            <div\n              className=\"col-10 offset-1 mt-3 box\"\n              style={{\n                // border: \"1px solid blue\",\n                padding: \"4px\",\n                background: `${this.newColor()}`\n              }}\n            >\n              {this.newColor()}\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}